const JSZip = require('jszip');
const util = require('./utils');
var MidiWriter = require('./midi-writer-js');//源代码在https://github.com/ThebestkillerTBK/MidiWriterJS
const { forEach } = require('jszip');

//歌谱和midi
class CCMZ {
  ver;
  score;
  midi;
}

const libCCMZ = {
  //下载CCMZ
  downloadCCMZ(url) {
    return util.httpget(url, '', true, '琴谱文件', false);
  },

  //解析CCMZ文件，来自Controller.js
  readCCMZ(buffer,callback) {
    let info = new CCMZ(null, null);
    let version = (new Uint8Array(buffer.slice(0, 1)))[0];
    console.log("CCMZ版本:", version);
    info.ver = version;
    let data = new Uint8Array(buffer.slice(1))
    if (version == 1) {
      JSZip.loadAsync(data).then((zip) => {
        zip
          .file("data.xml")
          .async("string")
          .then((json) => {
            info.score = json;
            zip
              .file("data.mid")
              .async("string")
              .then((json) => {
                info.midi = json;
                callback(info);
              });
          });
      });
    } else if (version == 2) {
      data = data.map((value) => {
        return value % 2 == 0 ? value + 1 : value - 1
      })
      JSZip.loadAsync(data).then((zip) => {
        zip
          .file("score.json")
          .async("string")
          .then((json) => {
            info.score = json;
            zip
              .file("midi.json")
              .async("string")
              .then((json) => {
                info.midi = json;
                callback(info);
              });
          });
      });
    }
  },

  //转换为MID文件
  writeMIDI(input,outputFile) {
    const baseMultiplier = 0.25;
    //速度
    let tempoTicks = new Array();
    for(tpo in input['tempos']) {
      var tick = input['tempos'][parseInt(tpo)]['tick'];
      tempoTicks.push(tick);
    }
    tempoTicks.sort((o, j) => {
      return o - j;
    });
    const baseTempo = input['tempos'][0]['tempo'];
    //初始化音轨
    var tracks = new Array();
    for (t in input['tracks']) {
      let trackOrig = input['tracks'][parseInt(t)];
      let currTrack = new MidiWriter.Track();
      //水印，可以不加
      currTrack.addText('Generated by chongchong-free');
      //乐器是钢琴
      currTrack.addEvent(new MidiWriter.ProgramChangeEvent({instrument: 1}));
      //名字
      let name = trackOrig['name'] != '' ? trackOrig['name'] : 'Unamned';
      currTrack.addTrackName(name);
      //基本速度
      currTrack.setTempo(Math.round(60000000 / baseTempo), 0);
      
      //添加note
      for(ev in input['events']) {
        let event = input['events'][parseInt(ev)];
        //删除不必要音符
        if (event['duration'] == 0 || !event['staff']) {
          continue;
        }
        if (event['tick'] == 0) {
          event['tick'] = 1;
        } 

        let ticksTemp = tempoTicks;
        ticksTemp.push(event['tick']);
        ticksTemp.sort((o, j) => {
          return o - j;
        });
        let tickPos = ticksTemp.indexOf(event['tick']);
        let currTempo = baseTempo;
        let multiplier1 = 1;
        if (tickPos != 0) {
          let thisTick = ticksTemp[tickPos-1];
          for(tpo in input['tempos']) {
            var tick = input['tempos'][parseInt(tpo)]['tick'];
            /*
            let legitDuration = 0;
            let thisDuration = event['duration'];
            let legitLimit = event['duration'];
            if (parseInt(tpo)+1 < input['tempos'].length) {
              legitLimit = input['tempos'][parseInt(tpo)]['tick'] - input['tempos'][parseInt(tpo)+1]['tick'];
            }
            while(thisDuration > 0) {
              if (thisDuration < legitLimit) {
                legitDuration = thisDuration;
                break;
              }
              thisDuration--;
            }*/
            if (tick = thisTick) {//tick < thisTick && thisTick - tick < legitDuration
              currTempo = input['tempos'][parseInt(tpo)]['tempo'];
              multiplier1 = baseTempo / currTempo; //*= baseTempo / currTempo;
            }
          }
        }
        ticksTemp.splice(tickPos, 1);
        let multiplier = baseMultiplier / multiplier1;
        let note = new MidiWriter.NoteEvent({
          velocity: 80,
          pitch: [event['event'][1]],
          duration: "T" + event['duration'] * multiplier,
          startTick:  event['tick'] * multiplier,
        });

        let trackID = event['staff'] - 1;
        if (parseInt(t) == trackID) {
          currTrack.addEvent(note);
        }
      }
      tracks.push(currTrack);
    }
    //写出
    if (util.isDetailedOutput()) console.log('开始写出MIDI文件');
    let write = new MidiWriter.Writer(tracks);
    require('fs').writeFileSync(outputFile, write.buildFile());
  }
}

module.exports = libCCMZ;

//MIDI类

class MeasureInfo {
  beats;//拍子
  number;//序号
  fifths;//升降调
  beatUnit;//拍子
}

class Event {
  tick;//时间
  duration;//持续时长
  track;//音轨序号
  event;//按键
  finger;//手指
  note;//未知
  part;//未知
  repeatIndex;//重复次数
  staff;//未知
  measure;//所在小节号
  elem_ids;//未知
  meas_start_tick;//小节开始时间
  id;//未知
}

class Measure {
  duration;//小节时长
  note_ticks;//每个音符出现时间
  measure;//小节号
}

class TempoChange {
  tempo;//速度
  tick;//时间
}

class Track {
  channel;//未知
  name;//名称
  program;//未知
}

class BeatChange {
  beats;//拍子
  beatsUnit;//拍子
  tick;//时间
}

class MIDI {
  ver;//版本号
  leftHandTrack;//低音音轨
  rightHandTrack;//高音音轨
  roughProgress;//未知
  beats;//拍号
  beatsUnit;//拍号
  beatInfos;//变拍子
  tempos;//变速
  tracks;//音轨
  measures;//小节
  measureInfos;//小节信息
  lyrics;//歌词
  events;//midi的event
}